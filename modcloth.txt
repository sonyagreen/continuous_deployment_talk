slides
Fix hot stats

## Intro

Hi! I'm Sonya. I work on the GitHub support team.

support requests (by email, no phone or chat)
4 million accounts on GitHub
300 new support requests per day
we send out about 550 responses a day
17 supportocats (on any one day, there are about 10 answering support requests). 

I'm here to talk with you about GitHub's continuous deployment workflow, how support fits into it, and a couple of interesting things we've learned.

## You should give a fuck about what I'm about to talk about because

GitHub ships early and often*. We have lots of users, who do complicated technical things with GitHub. 
understand our products nearly as well as we do. (
debug stuff
suggest solutions
"hey, we get bugs too!"

At GitHub, the support team is part of the continuous deployment workflow.
* async - always supportocat & Dev in chat 
* it's your project, but you need to sleep
* pace can be fast

But here's our secret to continuous deployment big and small
developers and support collaborate... with low ego. 
GitHub hires for low ego. 
talk pragmatically about what's going on
hard to scrutinize work you've done -- like calling your baby ugly
mutual respect abound
support isn't a second-class citizen
we've worked hard to prove we're helpful

We ship little things all the time.*
(I deployed https://github.com/github/github/pull/11824 which should fix some archive issues (zip / tar downloads). If you see any problems around generating repo archives in the next couple days ping me.)
Campfire + stars = shift log

We don't know until they've shipped
We don't need to know about them beforehand
Too much noise
Too much drag on devs
Up to the dev's discretion
We all want to not bother each other, so we're motivated.

We ship really big features too 
example is the contributions graph*
we are looped into the pull request before it's done
can dogfood it, become familiar

support team has access to all the code and issues 
in the owner's team
we have access to PRs, so even if we don't read code, we can read the associated comments and discussion
gives HUGE context  
in debugging
and what to tell the user
good support = being as honest as we can with our users
(because they're devs, we can go pretty deep with them)

Part of Support's job is writing up bug reports
Issues = bug tracking

Support is inherently motivated to track down bugs and write really good bug reports. Why? 
* we start seeing bugs reported from users
* each use case give us clues (well, from our users we get annotated screenshots and terminal outputs)
* support wants to fix bugs fast 
staunch the flow of  new reports of the same bug
knock out open tickets

So we make it easy for the developer to see what's wrong and fix it fast*.
* describe it
Support people have analytical skills. 
two un-identical support requests
seeing the connection
Unless YOU'RE looking at the support requests, you wouldn't necessarily see this.

 * duplicate & recreate steps
As a developer, if you have this great bug report in front of you:
* you can start to see what needs to be fixed
* it's been documented, easy to recreate

* more likely to care about the bug (because we've shown we already care by writing it up lovingly, and by showing the users care)
 * make sure it's not user error or something like an unsupported browser 
(*we once had a user report a site bug ... when we asked what browser, they told us: the Wii browser ... which technically is Opera, which isn't one of our supported browsers.)

It takes effort on our part to write up great bug reports
less time overall
developers find what's important and they fix things fast. 
That means happier users
less work for us 
surprises and delights users
important to look adept with our userbase

Your support team can do this. 
they don't need access to the code, 
don't need to have a technical background
already looking at user-reported problems all day
pattern recognition skills = supportQA superpower
understand the difference between 
a true bug:
when code intent and experience are two different things
when a user wants something different than what you made 
Important to know the difference

So, like I said, GitHub developers and support collaborate. 
luxury of shared information
PRs
Issues
our support system
asynchronous nature of GH leads to transparency and lots of comm
we all can know what's going on

Back to that continuous deployment
example: "normal" support load for a new, big feature*
* figured out legit bugs, get on those
* people can really hate when things change. When you update to something new, inevitably someone will say "I LOVED the old way, you need to go back to the old way".
* long tail of complicated bugs, workflows that were affected, people on vacation/casual users

Make a point with a story
Secret of low ego.

something we figured out to do 
a feature that surprised us with the amount of support responses
you think is going to be easy to support,
surprised by the depth and breadth of bugs and functionality issues.

UI update to GitHub Issues.*
This is what was originally rolled out.*

Within hours of the deployment
steady stream of feedback
The deployment wasn't a fix, it was a long-thought-out aesthetic and fucntionality upgrade.

Sorting through the feedback
usual reports of straight-up bugs
a LOT of general I-liked-it-the-way-it-was comments ... again, this is pretty standard
mixed in were also concerns about the lack of readability
not a bug
legitimate cause for thought
PR shows consensus, desire for these UI changes

Support needed a way to look at:*
Sorting a lot of data
Bugs and bugs and complaints and complaints and complaints.
* inflexible thinking*
* also totally reasonable concerns

not feel overwhelmed or have a knee-jerk reaction
that leads to inflexbility
Digestible
Saturday meant low numbers, also assumed lower attention from Hubbers
Taking time to sort 
issues had lots of data to go with it
no missing context we hadn't discovered yet
condensed everything useful one document. 
I've taken to calling this a dossier*. 

So, here's how we fixed it

First* bug list
easily identifiable actions
usual method of compelling bug report (recreate, screenshots, link to use cases, emoji, appropriate meme)

Second* biggest UI complaint: that the label colors were too low contrast

bug report not appropriate
When writing this: stats and stories

Stats: hard numbers, "one" vs "a few" vs "hundreds"*
Trap of support, seeing one bug report and sky is falling

Compelling stories**
more eloquent than what you could describe
an actual person out there.

Dossier written for myself, in /Support 
(workflow - private repository called /support/ which we use to spec out potential clusters of tickets that may be a problem, and we can @mention a team (like @design) to send them all a notification of it). 
Unsure about sharing it
never done this before
wall of text
Worry that the design team would hold firm to design,
Not want to consider changes to what they just shipped
harmful and distracting rather than helpful, but ... 

Turns out, they loved it * *
On a Saturday, 2 hours later
They jumped on bug fixes right away
started a conversation about how to address the readability problems.

Low-angst dossier 
lots of places to dig in / discuss 
brought minimal ego
They discussed the label colors, iterated on the design to benefit readability ... and ultimately, days later, decided to significantly change the design. Went from * to *

Now, we don't often roll back big visible UI changes, so it's impressive. They did what was right for users, not what they wanted.

*Here's GitHub. 
GitHub allows room for support
prove ourselves as useful contributors
rather than back-room uncaring email robots.

Support's job is to champion for the users AND developers
empathy goes both directions
motivated to write up excellent bug reports> 
makes the developers happy>
more likely to fix them sooner>
good for the users! 
It is an awesome, supportive cycle.

## Reasons why I did this

Any good support person can learn the analytical skills to become a bug hunter. You can leverage their inherent knowledge of your users. Get that knowledge about your bugs out of their heads.

On fixing those sticky problems
check your ego
talk pragmatically
you don't change
everyone wins by knowing the deal/being on same page

Your support team
however technical 
can work with you. 
I don't know how to code
don't need to understand GitHub's code

Together, you can then fix bugs faster and get on to the next adventure.

Situations like a the story I told can be stressful
ways to keep yourself at your best

Along with low ego and pragmatic talk
Pro Tipâ„¢
animated gifs modern equivalent to fish tank
lower blood pressure
find your own power gif
share mine
